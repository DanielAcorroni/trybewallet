{"version":3,"sources":["assets/imgs/trybe-logo.png","assets/imgs/money-logo.png","services/requestCurrrentCoinAPI.js","actions/index.js","pages/Login.js","component/Header.js","component/ValueInput.js","component/DescriptionInput.js","component/CurrencyInput.js","component/MethodInput.js","component/TagInput.js","component/TableWallet.js","pages/Wallet.js","App.js","serviceWorker.js","reducers/user.js","reducers/wallet.js","reducers/index.js","store/store.js","index.js"],"names":["module","exports","getCurrentCoins","fetch","then","response","json","ok","Promise","resolve","reject","loadingAction","type","errorApiAction","error","payload","Login","state","email","password","isButtonDisabled","handleChange","bind","handleSubmit","disableButton","e","preventDefault","this","props","history","loginInfo","push","target","name","value","setState","includes","length","onSubmit","id","src","trybeWalletLogo","alt","htmlFor","data-testid","onChange","required","minLength","disabled","React","Component","connect","dispatch","stateParam","Header","totalSum","expenses","totalValue","forEach","expense","exchangeRates","currency","ask","Number","toFixed","moneyLogo","width","defaultProps","description","method","tag","wallet","ValueInput","DescriptionInput","descript","CurrencyInput","currencies","role","map","coin","key","MethodInput","TagInput","TableWallet","console","log","actualExchange","separateName","split","Wallet","getCoinsAPI","walletInfo","sendToDispatch","user","App","basename","process","component","exact","path","Boolean","window","location","hostname","match","INITIAL_STATE","userReducer","action","isLoading","walletReducer","Object","keys","filter","coins","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.e00dd262.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trybe-logo.6f60677f.png\";","module.exports = __webpack_public_path__ + \"static/media/money-logo.96a5eb93.png\";","const COIN_API = 'https://economia.awesomeapi.com.br/json/all';\n\nconst getCurrentCoins = () => (\n  fetch(COIN_API)\n    .then((response) => (\n      response.json()\n        .then((json) => (response.ok ? Promise.resolve(json) : Promise.reject(json)))\n    ))\n);\n\nexport default getCurrentCoins;\n","import getCurrentCoins from '../services/requestCurrrentCoinAPI';\n\nexport const USER_TYPE = 'USER_TYPE';\nexport const WALLET_TYPE = 'WALLET_TYPE';\n\nexport const LOADING_TYPE = 'LOADING_TYPE';\nexport const SUCCES_TYPE = 'SUCCES_TYPE';\nexport const ERROR_TYPE = 'ERROR_TYPE';\n\nexport const userAction = (state) => ({ type: USER_TYPE, payload: state });\nexport const walletAction = (state) => ({ type: WALLET_TYPE, payload: state });\n\nexport const loadingAction = () => ({ type: LOADING_TYPE });\nexport const succesApiAction = (state) => ({ type: SUCCES_TYPE, payload: state });\nexport const errorApiAction = (error) => ({ type: ERROR_TYPE, payload: error });\n\nexport const fetchApiWithThunk = () => (dispatch) => {\n  dispatch(loadingAction);\n\n  return getCurrentCoins()\n    .then((response) => dispatch(succesApiAction(response)),\n      () => dispatch(errorApiAction));\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { userAction } from '../actions';\nimport trybeWalletLogo from '../assets/imgs/trybe-logo.png';\n\nclass Login extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      email: '',\n      password: '',\n      isButtonDisabled: true,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.disableButton = this.disableButton.bind(this);\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const { history, loginInfo } = this.props;\n    const { email } = this.state;\n    loginInfo(email);\n    history.push('/carteira');\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n    this.disableButton();\n  }\n\n  disableButton() {\n    const { email, password } = this.state;\n    const minLengthPassword = 5;\n    if (email.includes('@')\n    && email.includes('.com')\n    && password.length >= minLengthPassword) {\n      this.setState({\n        isButtonDisabled: false,\n      });\n    } else {\n      this.setState({\n        isButtonDisabled: true,\n      });\n    }\n  }\n\n  render() {\n    const { isButtonDisabled } = this.state;\n    return (\n      <form onSubmit={ this.handleSubmit } id=\"login-form\">\n        <div id=\"login-container\">\n          <img src={ trybeWalletLogo } alt=\"Trybewallet logo\" />\n          <label htmlFor=\"input-email\" id=\"email-label\">\n            Email:\n            <input\n              type=\"email\"\n              id=\"input-email\"\n              data-testid=\"email-input\"\n              name=\"email\"\n              onChange={ this.handleChange }\n              required\n            />\n          </label>\n          <label htmlFor=\"input-password\" id=\"password-label\">\n            Senha:\n            <input\n              type=\"password\"\n              id=\"input-password\"\n              data-testid=\"password-input\"\n              name=\"password\"\n              minLength=\"6\"\n              onChange={ this.handleChange }\n              required\n            />\n          </label>\n          <button type=\"submit\" disabled={ isButtonDisabled }>Entrar</button>\n        </div>\n      </form>\n    );\n  }\n}\n\nLogin.propTypes = {\n  loginInfo: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    loginInfo: (stateParam) => dispatch(userAction(stateParam)),\n  };\n}\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport moneyLogo from '../assets/imgs/money-logo.png';\n\nclass Header extends React.Component {\n  constructor() {\n    super();\n\n    this.totalSum = this.totalSum.bind(this);\n  }\n\n  totalSum() {\n    const { expenses } = this.props;\n    let totalValue = 0;\n    expenses.forEach((expense) => {\n      const { exchangeRates, currency, value } = expense;\n      const actualExchange = exchangeRates[currency];\n      const { ask } = actualExchange;\n      totalValue += (Number(value) * ask);\n    });\n    return totalValue.toFixed(2);\n  }\n\n  render() {\n    const { email } = this.props;\n    return (\n      <header id=\"wallet-header\">\n        <div>\n          <img src={ moneyLogo } width=\"100px\" alt=\"Trybewallet logo\" />\n          <p data-testid=\"email-field\">{ email }</p>\n        </div>\n        <div id=\"total-field\">\n          <p data-testid=\"total-field\">\n            {\n              this.totalSum()\n            }\n          </p>\n          <p data-testid=\"header-currency-field\">BRL</p>\n        </div>\n      </header>\n    );\n  }\n}\n\nHeader.defaultProps = {\n  expenses: [{\n    id: 0,\n    value: '',\n    description: '',\n    currency: '',\n    method: '',\n    tag: '',\n  }],\n};\n\nHeader.propTypes = {\n  email: PropTypes.string.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object),\n};\n\nfunction mapStateToProps(state) {\n  const { wallet: { expenses } } = state;\n  return {\n    expenses,\n    state,\n  };\n}\n\nexport default connect(mapStateToProps, null)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ValueInput extends React.Component {\n  render() {\n    const { value, handleChange } = this.props;\n    return (\n      <label htmlFor=\"value\">\n        Valor:\n        <input\n          type=\"number\"\n          data-testid=\"value-input\"\n          id=\"value\"\n          name=\"value\"\n          onChange={ handleChange }\n          value={ value }\n        />\n      </label>\n    );\n  }\n}\n\nValueInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n\nexport default ValueInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass DescriptionInput extends React.Component {\n  render() {\n    const { descript, handleChange } = this.props;\n    return (\n      <label htmlFor=\"description\">\n        Descrição:\n        <textarea\n          data-testid=\"description-input\"\n          id=\"description\"\n          name=\"description\"\n          onChange={ handleChange }\n          value={ descript }\n        />\n      </label>\n    );\n  }\n}\n\nDescriptionInput.propTypes = {\n  descript: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n\nexport default DescriptionInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass CurrencyInput extends React.Component {\n  render() {\n    const { currencies } = this.props;\n    const { currency, handleChange } = this.props;\n    return (\n      <label htmlFor=\"currency\">\n        Moeda:\n        <select\n          data-testid=\"currency-input\"\n          name=\"currency\"\n          id=\"currency\"\n          onChange={ handleChange }\n          value={ currency }\n          role=\"combobox\"\n        >\n          {\n            currencies.map((coin) => (\n              <option key={ coin } value={ coin }>{ coin }</option>\n            ))\n          }\n        </select>\n      </label>\n    );\n  }\n}\n\nCurrencyInput.propTypes = {\n  currency: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  currencies: PropTypes.arrayOf(PropTypes.string).isRequired,\n};\n\nfunction mapStateToProps(state) {\n  const { wallet: { currencies } } = state;\n  return {\n    currencies,\n  };\n}\n\nexport default connect(mapStateToProps, null)(CurrencyInput);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MethodInput extends React.Component {\n  render() {\n    const { method, handleChange } = this.props;\n    return (\n      <label htmlFor=\"method\">\n        Método de pagamento:\n        <select\n          data-testid=\"method-input\"\n          name=\"method\"\n          onChange={ handleChange }\n          value={ method }\n          id=\"method\"\n        >\n          <option value=\"Dinheiro\">Dinheiro</option>\n          <option value=\"Cartão de crédito\">Cartão de crédito</option>\n          <option value=\"Cartão de débito\">Cartão de débito</option>\n        </select>\n      </label>\n    );\n  }\n}\n\nMethodInput.propTypes = {\n  method: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n\nexport default MethodInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass TagInput extends React.Component {\n  render() {\n    const { tag, handleChange } = this.props;\n    return (\n      <label htmlFor=\"tag\">\n        Tipo de gasto:\n        <select\n          data-testid=\"tag-input\"\n          name=\"tag\"\n          id=\"tag\"\n          onChange={ handleChange }\n          value={ tag }\n        >\n          <option value=\"Alimentação\">Alimentação</option>\n          <option value=\"Lazer\">Lazer</option>\n          <option value=\"Trabalho\">Trabalho</option>\n          <option value=\"Transporte\">Transporte</option>\n          <option value=\"Saúde\">Saúde</option>\n        </select>\n      </label>\n    );\n  }\n}\n\nTagInput.propTypes = {\n  tag: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n};\n\nexport default TagInput;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nclass TableWallet extends React.Component {\n  render() {\n    const { expenses } = this.props;\n    return (\n      <table>\n        <thead id=\"table-head\">\n          <tr>\n            <th>Valor convertido</th>\n            <th>Moeda</th>\n            <th>Moeda de conversão</th>\n            <th>Método de pagamento</th>\n            <th>Descrição</th>\n            <th>Tag</th>\n            <th>Câmbio utilizado</th>\n            <th>Editar/Excluir</th>\n          </tr>\n        </thead>\n        <tbody id=\"table-body\">\n          {\n            expenses.map((expense) => {\n              console.log(expense);\n              let totalValue = 0;\n              const { exchangeRates, currency, value } = expense;\n              const actualExchange = exchangeRates[currency];\n              const { ask, name } = actualExchange;\n              const separateName = name.split('/');\n              totalValue += (Number(value) * ask);\n              return (\n                <tr key={ expense.id }>\n                  <td role=\"cell\">{ totalValue.toFixed(2) }</td>\n                  <td role=\"cell\">{ expense.value }</td>\n                  <td role=\"cell\">{ separateName[0] }</td>\n                  <td role=\"cell\">{ expense.method }</td>\n                  <td role=\"cell\">{ expense.description }</td>\n                  <td role=\"cell\">{ expense.tag }</td>\n                  <td role=\"cell\">{ Number(ask).toFixed(2) }</td>\n                  <td role=\"cell\">Real</td>\n                </tr>\n              );\n            })\n          }\n        </tbody>\n      </table>\n    );\n  }\n}\n\nTableWallet.defaultProps = {\n  expenses: [],\n};\n\nTableWallet.propTypes = {\n  expenses: PropTypes.arrayOf(PropTypes.object),\n};\n\nfunction mapStateToProps(state) {\n  const { wallet: { expenses } } = state;\n  return {\n    expenses,\n    state,\n  };\n}\n\nexport default connect(mapStateToProps, null)(TableWallet);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { walletAction, fetchApiWithThunk } from '../actions';\nimport Header from '../component/Header';\nimport ValueInput from '../component/ValueInput';\nimport DescriptionInput from '../component/DescriptionInput';\nimport CurrencyInput from '../component/CurrencyInput';\nimport MethodInput from '../component/MethodInput';\nimport TagInput from '../component/TagInput';\nimport TableWallet from '../component/TableWallet';\n\nclass Wallet extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      id: 0,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    const { getCoinsAPI } = this.props;\n    getCoinsAPI();\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const { walletInfo, expenses, getCoinsAPI, exchangeRates } = this.props;\n    const { id,\n      value,\n      description,\n      currency,\n      method,\n      tag } = this.state;\n    const sendToDispatch = {\n      id,\n      value,\n      description,\n      currency,\n      method,\n      tag,\n      exchangeRates,\n    };\n    expenses.push(sendToDispatch);\n    walletInfo(expenses);\n    this.setState({\n      id: id + 1,\n      value: '',\n      description: '',\n      currency: 'USD',\n      method: 'Dinheiro',\n      tag: 'Alimentação',\n    });\n    getCoinsAPI();\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  render() {\n    const { email } = this.props;\n    const { value, description, currency, method, tag } = this.state;\n    return (\n      <>\n        <Header email={ email } />\n        <form onSubmit={ this.handleSubmit }>\n          <ValueInput value={ value } handleChange={ this.handleChange } />\n          <DescriptionInput descript={ description } handleChange={ this.handleChange } />\n          <CurrencyInput currency={ currency } handleChange={ this.handleChange } />\n          <MethodInput method={ method } handleChange={ this.handleChange } />\n          <TagInput tag={ tag } handleChange={ this.handleChange } />\n          <button type=\"submit\">Adicionar despesa</button>\n          <TableWallet />\n        </form>\n      </>\n    );\n  }\n}\n\nWallet.defaultProps = {\n  expenses: [],\n  exchangeRates: {},\n};\n\nWallet.propTypes = {\n  email: PropTypes.string.isRequired,\n  walletInfo: PropTypes.func.isRequired,\n  expenses: PropTypes.arrayOf(PropTypes.object),\n  getCoinsAPI: PropTypes.func.isRequired,\n  exchangeRates: PropTypes.objectOf(PropTypes.object),\n};\n\nfunction mapStateToProps(state) {\n  const { user: { email }, wallet: { expenses, exchangeRates } } = state;\n  return {\n    email,\n    expenses,\n    exchangeRates,\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    walletInfo: (stateParam) => dispatch(walletAction(stateParam)),\n    getCoinsAPI: (stateParam) => dispatch(fetchApiWithThunk(stateParam)),\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Wallet);\n","import React from 'react';\nimport { Route, Switch } from 'react-router';\nimport { BrowserRouter } from 'react-router-dom';\nimport Login from './pages/Login';\nimport Wallet from './pages/Wallet';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route component={ Login } exact path=\"/\" />\n          <Route component={ Wallet } path=\"/carteira\" />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { USER_TYPE } from '../actions';\n\nconst INITIAL_STATE = {\n  email: '',\n};\n\nfunction userReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case USER_TYPE:\n    return ({\n      ...state,\n      email: action.payload,\n    });\n  default:\n    return state;\n  }\n}\n\nexport default userReducer;\n","import { ERROR_TYPE, LOADING_TYPE, SUCCES_TYPE, WALLET_TYPE } from '../actions';\n\nconst INITIAL_STATE = {\n  expenses: [],\n  isLoading: false,\n  currencies: [],\n  error: '',\n};\n\nfunction walletReducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n  case WALLET_TYPE:\n    return ({\n      ...state,\n      expenses: action.payload,\n    });\n  case LOADING_TYPE:\n    return {\n      ...state,\n      isLoading: true,\n    };\n  case SUCCES_TYPE:\n    return {\n      ...state,\n      currencies: Object.keys(action.payload).filter((coins) => coins !== 'USDT'),\n      exchangeRates: action.payload,\n      isLoading: false,\n    };\n  case ERROR_TYPE:\n    return {\n      ...state,\n      error: action.payload,\n      isLoading: false,\n    };\n  default:\n    return state;\n  }\n}\n\nexport default walletReducer;\n","import { combineReducers } from 'redux';\nimport user from './user';\nimport wallet from './wallet';\n\nconst rootReducer = combineReducers({ user, wallet });\n// Configure os seus reducers.\n// ATENÇÃO: você obrigatoriamente tem que utilizar as chaves \"user\" e \"wallet\" no seu estado global\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(thunk),\n));\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './assets/index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store/store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}